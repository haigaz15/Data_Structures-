a) merge sort space complexity is always O(nlogn) since the algorithm divide the given given data structure into 10/2^j (where j is the depth of merege sort tree)elements,
thus making it's height equal to logn. Also, since in each method call number of operations are O(1) == constant time therefore the algorithm runs
at O(nlogn).
b) if insertion sort is at its best case which means that all elements in the array  are sorted then it runs
at O(n) time. This happens because the insertion sort relies on two loops. Since the check in the inner loop always fails because the
the array is sorted the outer loop runs only O(n) time making the insertion sort linear.
c)In order for the quick sort to run at O(n^2) time the pivot is either the largest element or the smalles element in the array
This happens because the quick sort divide the array into elements bigger and elements smaller than the pivot and place them into
the separate arrays. Thus if an element is either the max or the min element the quick sort will create one empty array.
To calculate we can say that the quick sort tree height is O(n) and at each level each node represent a method call and they all do O(1)
operation thus in total the merge sort will run at O(n^2) time.
